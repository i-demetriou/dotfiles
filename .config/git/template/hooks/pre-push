#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

STABLE='master'
LATEST='develop'

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

check_branch_name() {
  name="$1"

  no_underscore=$(grep "_" <<<$name)
  if [ -n "$no_underscore" ]; then
    echo "underscore present"
  fi

  check_name=$(grep -E "refs/heads/(release/v[0-9]+\.[0.9]+|fix/[^/]+$|bugfix/[^/]+$|hotfix/[^/]+$|investigate/[^/]+$|feature/improve/[^/]+$|feature/[^/]+$)" <<<$name)
  if [ -z "$check_name" ]; then
    echo "name doesn't comply"
  fi
}

while read local_ref local_sha remote_ref remote_sha; do
  check=$(check_branch_name "$remote_ref")
  if [ -n "$check" ]; then
    echo >&2 "Remote branch "$remote_ref" invalid ($check). The following branch names are allowed:"
    echo >&2 "  release/v<major.minor>"
    echo >&2 "  fix/<fix-name> (not many commits!)"
    echo >&2 "  bugfix/<fix-name> (not many commits!)"
    echo >&2 "  hotfix/<fix-name> (not many commits!)"
    echo >&2 "  investigate/<name> (not to be merged - must be renamed before merging)"
    echo >&2 "  feature/improve/<improvement-name> (for small unnecessary improvement)"
    echo >&2 "  feature/<feature-name>"
    echo >&2 "All names must have dash instead of underscore"
    exit 1
  fi

  if [ "$local_sha" = $zero ]; then
    # Handle delete
    continue
  fi

  if [ "$remote_sha" = $zero ]; then
    # New branch, examine all commits
    range="origin/$STABLE..$local_sha"
  else
    # Update to existing branch, examine new commits
    range="$remote_sha..$local_sha"
  fi

  # Check for WIP commit
  commit=$(git rev-list -n 1 --grep 'WIP' "$range")
  if [ -n "$commit" -a "$commit" != "$local_sha" ]; then
    echo >&2 "Found WIP commit in $local_ref before the latest one, not pushing"
    exit 1
  fi
done

exit 0
